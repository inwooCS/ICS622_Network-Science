)
# Replace this comment with computations of reciprocity and global
# transitivity, displayed in tabular form, such as:
#   Graph  reciprocity transitivity
#   HEP    #.######### #.##########
#   G(n,m) #.######### #.##########
#   Config #.######### #.##########
tibble(
HEP = "stff",
HEP.gnm = "stfs",
HEP.config = "stff",
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
tibble(
HEP = "stff",
HEP.gnm = "stfs",
HEP.config = "stff",
)
# Replace this comment with computations of reciprocity and global
# transitivity, displayed in tabular form, such as:
#   Graph  reciprocity transitivity
#   HEP    #.######### #.##########
#   G(n,m) #.######### #.##########
#   Config #.######### #.##########
tibble(
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
# Replace this comment with computations of reciprocity and global
# transitivity, displayed in tabular form, such as:
#   Graph  reciprocity transitivity
#   HEP    #.######### #.##########
#   G(n,m) #.######### #.##########
#   Config #.######### #.##########
tibble(
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
tibble(
"Reciprocity HEP" = transitivity(HEP),
"Reciprocity HEP.gnm" = transitivity(HEP.gnm),
"Reciprocity HEP.config" = transitivity(HEP.config)
)
# Replace this comment with computations of reciprocity and global
# transitivity, displayed in tabular form, such as:
#   Graph  reciprocity transitivity
#   HEP    #.######### #.##########
#   G(n,m) #.######### #.##########
#   Config #.######### #.##########
tibble(
"Reciprocity HEP" = transitivity(HEP),
"Reciprocity HEP.gnm" = transitivity(HEP.gnm),
"Reciprocity HEP.config" = transitivity(HEP.config)
)
tibble(
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
tibble(
"Reciprocity HEP" = transitivity(CH),
)
tibble(
"Global Transitivity CH" = transitivity(CH, type="global"),
)
tibble(
"Reciprocity CH" = transitivity(CH),
)
tibble(
"Reciprocity HEP" = reciprocity(HEP),
"Reciprocity HEP.gnm" = reciprocity(HEP.gnm),
"Reciprocity HEP.config" = reciprocity(HEP.config)
)
tibble(
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
tibble(
"Global Transitivity CH" = transitivity(CH, type="global"),
)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
tibble(
"Reciprocity HEP" = reciprocity(HEP),
"Reciprocity HEP.gnm" = reciprocity(HEP.gnm),
"Reciprocity HEP.config" = reciprocity(HEP.config)
)
tibble(
"Global Transitivity HEP" = transitivity(HEP, type="global"),
"Global Transitivty HEP.gnm" = transitivity(HEP.gnm),
"Global Transitivity HEP.config" = transitivity(HEP.config, type="global")
)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities
source("Utility/topnv.R")
tibble(
"Reciprocity CH" = reciprocity(CH, directed=TRUE),
)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml", directed=TRUE)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
tibble(
"Reciprocity CH" = reciprocity(CH),
)
tibble(
"Global Transitivity CH" = transitivity(CH, type="global"),
)
transitivity(CH, type="local")
?read_graph
?transitivity
tibble(
"Local Transitivity CH" = transitivity(CH, type="localundirected"),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="localundirected"),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities
source("Utility/topnv.R")
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
summary(CH)
summary(CH$EdgeId)
summary(CH$Edge Label)
summary(CH$EdgeLabel)
summary(CH$EdgeL)
summary(CH)
g <- induced_subgraph(CH)
g <- induced_subgraph(CH, 19286)
# summary(g) after you construct it
g <- induced_subgraph(CH, 19286)
summary(g after you construct it
g <- induced_subgraph(CH, 19286)
summary(g)
?plot
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(CH, layout=layout_with_fr, vertex.size = 4, vertex.color = CH$type, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout_with_fr, vertex.size = 4, vertex.color = g$type, edge.arrow.size=0.5)
g <- induced_subgraph(CH, 1)
summary(g)
g <- induced_subgraph(CH, 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
g <- induced_subgraph(CH, v= 19286)
summary(g)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout_with_fr, vertex.size = 4, vertex.color = g$type, edge.arrow.size=0.5)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
g <- induced_subgraph(CH, vids = 45)
summary(g)
CH <- read_graph("Networks/comic-hero-network.graphml", format="graphml")
summary(CH)
g <- induced_subgraph(CH, vids = 45)
summary(g)
View(g)
g <- induced_subgraph(CH)
g <- induced_subgraph(CH, vids = 0)
g <- induced_subgraph(CH, vids = 3.736819)
summary(g)
g <- induced_subgraph(CH, vids = 3.7)
summary(g)
g <- induced_subgraph(CH, vids = 3)
summary(g)
g <- induced_subgraph(CH, vids = 3)
summary(g)
g <- induced_subgraph(CH, vids = 3)
summary(g)
g <- induced_subgraph(CH, vids = 3)
summary(g)
g <- induced_subgraph(CH, vids = 3)
summary(g)
g <- induced_subgraph(CH)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
topnv(CH, transitivity(CH, type="local"))$label
topnv(CH, transitivity(CH, type="local"))$label
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout_with_fr, vertex.size = 50, vertex.color = g$type, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(CH, layout=layout_with_fr, vertex.size = 50, vertex.color = CH$type, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(CH, layout=layout_with_fr, vertex.label= CH$label, vertex.size = 50, vertex.color = CH$type, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout_with_fr, vertex.label= g$label, vertex.size = 50, vertex.color = g$type, edge.arrow.size=0.5)
g <- induced_subgraph(CH)$label
g <- induced_subgraph(CH)$label
g <- induced_subgraph(CH, vid=1)$label
summary(g)
g <- induced_subgraph(CH, vid=5)
summary(g)
View(g)
g <- induced_subgraph(CH, vid=c(0))
g <- induced_subgraph(CH, vid=0)
g <- induced_subgraph(CH, vid=1)
summary(g)
g <- induced_subgraph(CH, vid=0)
g <- induced_subgraph(CH, vid="3")
summary(g)
g <- induced_subgraph(CH, vid=0.00000000)
g <- induced_subgraph(CH, vid=0.00000000)
g <- induced_subgraph(CH, v=0)
?induced_subgraph
weird <- 3.736819e-06
g <- induced_subgraph(CH, weird)
weird <- 3.736819e-06
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(3.736819e-06)
g <- induced_subgraph(CH, vim=weird)
weird <- c(0.000003736819)
g <- induced_subgraph(CH, vim=weird)
weird <- c(0.000003736819)
g <- induced_subgraph(CH, vim=0.000003736819)
g <- induced_subgraph(CH, vim=0.000003736819)
g <- induced_subgraph(CH, vim="0.000003736819")
g <- induced_subgraph(CH, vim=0.000003736819)
tibble(
"Global Transitivity CH" = transitivity(CH, type="global"),
)
or 0.000003736819.
tibble(
"Global Transitivity CH" = transitivity(CH, type="global"),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
g <- induced_subgraph(CH, vim=0.000003736819)
g <- induced_subgraph(CH, vim=0.000003736819)
summary(CH)
g <- induced_subgraph(CH, vim=0.000003736819)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities
source("Utility/topnv.R")
g <- induced_subgraph(CH, V(cH)[count_triangles(CH, vids = V(CH)) != 0])
g <- induced_subgraph(CH, V(CH)[count_triangles(CH, vids = V(CH)) != 0])
summary(g)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'red')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'blue')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('orange', 'white')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.fruchterman.reingold, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.random, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.random, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.random, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.random, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.random, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.sphere, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.label.color= "black", vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.label.color= "black", vertex.label.size = 12, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.label.color= "black", vertex.label.size = 1, vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g, layout=layout.circle, vertex.label= V(g)$id, vertex.label.color= "black", vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1], vertex.size=30, edge.arrow.size=0.5, main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g,
layout=layout.circle,
vertex.label= V(g)$id,
vertex.label.color= "black",
vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1],
vertex.size=30,
edge.arrow.size=0.5,
main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g,
layout=layout.circle,
vertex.label= V(g)$id,
vertex.label.color= "black",
vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1],
vertex.size=50,
edge.arrow.size=0.5,
main="Induced Subgraph Plot of CH")
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g,
layout=layout.circle,
vertex.label= V(g)$id,
vertex.label.color= "black",
vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1],
vertex.size=20,
edge.arrow.size=0.5,
main="Induced Subgraph Plot of CH")
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
tibble(
"Local Transitivity CH" = transitivity(CH, type="local"),
)
g <- induced_subgraph(CH, V(CH)[count_triangles(CH, vids = V(CH)) != 0])
summary(g)
# Plot the induced subgraph, with vertices labeled by $id and colored
# according to their bipartite $type, and vertex and arrowhead sizes
# adjusted for visibility
plot(g,
layout=layout.circle,
vertex.label= V(g)$id,
vertex.label.color= "black",
vertex.color = c('white', 'orange')[as.numeric(V(g)$type == 'comic') + 1],
vertex.size=20,
edge.arrow.size=0.5,
main="Induced Subgraph Plot of CH")
