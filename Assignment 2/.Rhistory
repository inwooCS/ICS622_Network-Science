```{r setup, include=FALSE, echo=FALSE}
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
```{r}
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
WA
summary(WA.weights)
summary(WA.weight)
mean(weight(WA))
sum(E(WA)$weight)
gsize(WA)
strength(WA)
Sum(Strength(WA))
sum(strength(WA))
options(max.print=999999)
sum(strength(WA))
strength(WA)
(sum(strength(WA))/1285
d
(sum(strength(WA))
d
sum(strength(WA)) / 1285
length(strength(WA))
(WA.mwdeg <- sum(strength(WA))/length(strength(WA)))
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- sum(strength(WA))/length(strength(WA)))
```{r}
```{r}
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- sum(strength(WA))/length(strength(WA)))
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- sum(strength(WA))/length(strength(WA)))
# WA.mdeg
# WA.mdeg
WA.mdeg
WA.mwdeg
My guess would be that mean degree assumes all weights are 1.0 instead of their respected weights because we are not specifying to consider the weights during ```mean(degree(WA)))```.
?layout_
plot(WA, main = "WA with lin-lin",
layout = layout_with_fr)
plot(WA, main = "WA with lin-lin",
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
layout = layout_with_drl)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
layout = layout_with_drl)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_circle)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_drl)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_fr)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_drl)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_fr)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 10,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 2,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_kk)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_with_drl)
plot(WA, main = "WA with lin-lin",
vertex.label = NA,
vertex.size = 4,
edge.arrow.size = 0.4,
layout = layout_in_circle)
plot(degree.distribution(WA))
Isolated = which(degree(WA)==0)
Isolated = which(degree(WA)==0)
WA2 <- WA
Isolated = which(degree(WA)==0)
WA2 <- WA
WA2 = delete.vertices(WA2, Isolated)
plot(degree.distribution(WA))
Isolated = which(degree(WA)==0)
WA2 <- WA
WA2 = delete.vertices(WA2, Isolated)
plot(degree.distribution(WA))
Isolated = which(degree(WA)==0)
WA2 <- WA
WA2 = delete.vertices(WA2, Isolated)
plot(degree.distribution(WA2))
Isolated = which(degree(WA)==0)
WA2 <- WA
WA2 = delete.vertices(WA2, Isolated)
WA2 = WA2[-Isolated,]
plot(degree.distribution(WA2), layout = WA2)
Isolated = which(degree(WA)==0)
WA2 <- WA
WA2 = delete.vertices(WA2, Isolated)
WA2 = WA2[-Isolated,]
plot(degree.distribution(WA2), layout = WA2)
dd <- degree.distribution(WA)
plot(ifelse(dd ==0, NA, dd),
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "degree distribution", ylab = "index",
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "degree distribution", ylab = "index",
log="xy"
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "degree distribution", ylab = "index",
#log="xy"
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd", ylab = "p(Nd)",
#log="xy"
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd", ylab = "p(Nd)",
#log="xy"
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd", ylab = "p(Nd)",
log="xy"
)
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
log="xy")
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log="xy")
#### d. Discussion of Degree Distribution
sd
c
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log="xy")
#### d. Discussion of Degree Distribution
*Discuss the degree distribution plot as if you are explaining to a client what the degree distribution plot tells us. Explain the specific plot, not just how these plots work in general. Relate the features of the degree distribution plot to the application domain (EuroSiS web sites) so your client can understand!*
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log="xy")
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log="xy")
plot(ifelse(dd ==0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
)
plot(ifelse(dd ==0, NA, dd)
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
)
plot(ifelse(dd == 0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)"
)
plot(ifelse(dd == 0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)"
)
plot(ifelse(dd == 0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log = "xy"
)
plot(ifelse(dd == 0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log = "xy"
)
dd <- degree.distribution(WA)
plot(ifelse(dd == 0, NA, dd),
main = "Degree Distribution No Zeros",
xlab= "Nd",
ylab = "p(Nd)",
#log = "xy"
)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
(WA.mdist <- mean_distance(WA))
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
# WA.mdist
(WA.diam  <- diameter(WA, weights=NA))
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="value",
ylab="count",
type='h',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='b',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='h',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='b',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='o',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='p',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='h',
lwd=4)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='h',
lwd=2)
plot(distance_table(WA)$res,
main="Distance Distribution",
xlab="Value",
ylab="Count",
type='h',
lwd=10)
plot(distance_table(WA)$res,
main = "Distance Distribution",
xlab = "Value",
ylab = "Count",
type = 'h',
lwd = 10)
plot(distance_table(WA)$res,
main = "Distance Distribution",
xlab = "Value",
ylab = "Count",
type = 'h',
lwd = 6)
plot(distance_table(WA)$res,
main = "Distance Distribution",
xlab = "Value",
ylab = "Count",
type = 'h')
plot(distance_table(WA)$res,
main = "Distance Distribution",
xlab = "Value",
ylab = "Count")
,
plot(distance_table(WA)$res,
main = "Distance Distribution",
xlab = "Value",
ylab = "Count",
type = 'h',
lwd = 6)
?transitivity
(WA.avglocalcc  <- transitivity(WA, type ="average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
(WA.avglocalcc  <- transitivity(WA, type ="average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
WA.weakC <- components(WA, mode = c("weak"))
WA.weakC <- components(WA, mode = c("weak"))
# ___your_expression_here___
(WA.weakC <- components(WA, mode = c("weak")))
(WA.weakC <- components(WA, mode = c("weak")))
(WA.strongC <- components(WA, mode = c("strong")))
(WA.weakC <- components(WA, mode = c("weak")))
(WA.strongC <- components(WA, mode = c("strong")))
(WA.strongC <- components(WA, mode = c("weak", "strong")))
(WA.weakC <- components(WA, mode = c("weak")))
(WA.weakC <- components(WA, mode = c("weak")))
(WA.strongC <- components(WA, mode = c("weak", "strong")))
(WA.strongC <- components(WA, mode = c("weak", "strong")))
summary(WA.CC)
summary(WA.strongC)
attributes(WA)
attributes(WA.strongC)
attributes(WA.strongC)
(WA.CC <- (components(WA, mode = c("weak")))    )
(WA.CC <- (components(WA))    )
, "strong"
(WA.CC <- (components(WA, mode = c("weak", "strong")))    )
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==4]$label
(V(WA)[components(WA)$membership==2]$label)
(V(WA)[components(WA)$membership==3]$label)
(V(WA)[components(WA)$membership==4]$label)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership]$label
V(WA)[components(WA)$membership]
V(WA)[length(components(WA)$membership)]
V(WA)[length(components(WA)$no)]
V(WA)[(components(WA)$no)]
(V(WA)[(components(WA)$no)])
test <- V(WA)[(components(WA)$no)]
test
componenets(WA)$no
components(WA)$no
(WA.CS <- components(WA)$csize))
(WA.CC <- components(WA)$no)
(WA.CS <- components(WA)$csize)
(WA.CC <- components(WA)$no)
(WA.CS <- components(WA)$csize)
(V(WA)[components(WA)$membership==2]$label)
(V(WA)[components(WA)$membership==3]$label)
(V(WA)[components(WA)$membership==4]$label)
`r # WA.avglocalcc`
`r  WA.avglocalcc`
```{r}  WA.avglocalcc```
WA.avglocalcc
WA.globalcc
`r  WA.mdist`
WA.mdist
Metric                         | Value
------------------------------ | -------------
Gephi Average Local CC:        | 0.381 / 0.23477402329444885
igraph Average Local CC:       | `  WA.avglocalcc `
igraph Global Transitivity:    | `  WA.globalcc `
WA.avglocalcc
WA.globalcc
