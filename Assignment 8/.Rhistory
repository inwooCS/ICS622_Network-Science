require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
source("Utility/reify_link_communities.R")
NS <- read_graph("Networks/netscience.graphml",
format="graphml")
NS <- read_graph("Networks/netscience.graphml",
format="graphml")
summary(NS)
# Compute unweighted degree, weighted degree, unweighted page rank,
# and unweighted betweenness centrality for the vertices in this
# graph, and assign them to vertices as attributes
summary(NS)
?betweenness
V(NS)$betweenness <- betweenness(NS, v = V(NS))
# Compute unweighted degree, weighted degree, unweighted page rank,
# and unweighted betweenness centrality for the vertices in this
# graph, and assign them to vertices as attributes
V(NS)$degree <- degree(NS)
V(NS)$wdegree <- strength(NS, weights=E(NS)$weight)
V(NS)$pagerank <- page_rank(NS)$vector
V(NS)$betweenness <- betweenness(NS, v = V(NS))
summary(NS)
V(NS)$betweenness
# Compute unweighted cluster_louvain and unweighted cluster_infomap
# community membership, and assign these as attributes to the
# vertices.
NS.louvain     <- cluster_louvain(NS, weights= E(Heroes)$weight)
# Compute unweighted cluster_louvain and unweighted cluster_infomap
# community membership, and assign these as attributes to the
# vertices.
NS.louvain     <- cluster_louvain(NS, weights= E(NS)$weight)
NS.infomap     <- cluster_infomap(NS, e.weights = E(NS)$weight)
V(NS)$louvain  <- membership(NS.louvain)
V(NS)$infomap  <- membership(NS.infomap)
summary(NS)
# Compute unweighted degree, weighted degree, unweighted page rank,
# and unweighted betweenness centrality for the vertices in this
# graph, and assign them to vertices as attributes
V(NS)$degree <- degree(NS)
V(NS)$wdegree <- strength(NS, mode="all")
V(NS)$pagerank <- page_rank(NS)$vector
V(NS)$betweenness <- betweenness(NS, normalized=TRUE, weights=1/E(NS)$weight)
summary(NS)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
source("Utility/reify_link_communities.R")
NS <- read_graph("Networks/netscience.graphml",
format="graphml")
summary(NS)
# Compute unweighted degree, weighted degree, unweighted page rank,
# and unweighted betweenness centrality for the vertices in this
# graph, and assign them to vertices as attributes
V(NS)$degree <- degree(NS)
V(NS)$wdegree <- strength(NS, mode="all")
V(NS)$pagerank <- page_rank(NS)$vector
V(NS)$betweenness <- betweenness(NS, normalized=TRUE, weights=1/E(NS)$weight)
summary(NS)
# Compute unweighted cluster_louvain and unweighted cluster_infomap
# community membership, and assign these as attributes to the
# vertices.
V(NS)$louvain  <- membership(cluster_louvain(NS))
V(NS)$infomap  <- membership(cluster_louvain(NS))
summary(NS)
?as_edgelist
?getLinkCommunities
getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
NS_edges <- as_edgelist(NS)
head(NS_edges)
getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
# Construct an unweighted edge list.
# Compute link communities with hcmethod "average", and verbose=FALSE
#   and plot=FALSE. DO NOT USE {r echo=FALSE}: it hides the code
# Print the link community object
NS_edges <- as_edgelist(NS)
head(NS_edges)
NS_lc <- getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
# Construct an unweighted edge list.
# Compute link communities with hcmethod "average", and verbose=FALSE
#   and plot=FALSE. DO NOT USE {r echo=FALSE}: it hides the code
# Print the link community object
NS_edges <- as_edgelist(NS)
head(NS_edges)
NS_lc <- getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
print(NS_lc)
# Use reify_link_communities to create a copy of the graph with link
# communities reified as nodes. Summarize the new graph.
# summary(...)
NS_comm <-reify_link_communities(NS, NS_lc)
?reify_link_communities
?reify_link_communities
??reify_link_communities
reify_link_communities
# Use reify_link_communities to create a copy of the graph with link
# communities reified as nodes. Summarize the new graph.
# summary(...)
NS_comm <- reify_link_communities(NS, NS_lc, comm_p = TRUE)
# Construct an unweighted edge list.
# Compute link communities with hcmethod "average", and verbose=FALSE
#   and plot=FALSE. DO NOT USE {r echo=FALSE}: it hides the code
# Print the link community object
NS_edges <- as_edgelist(NS)
head(NS_edges)
NS_lc <- getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
print(NS_lc)
# Use reify_link_communities to create a copy of the graph with link
# communities reified as nodes. Summarize the new graph.
# summary(...)
NS_comm <- reify_link_communities(NS, NS_lc)
# write_graph, giving it a different name to indicate it has link
# communities. Include this in your HW submission.
write_graph(NS_comm, "NS-Reified-Communities.graphml", format="graphml")
# write_graph, giving it a different name to indicate it has link
# communities. Include this in your HW submission.
write_graph(NS_comm, "/Networks/NS-Reified-Communities.graphml", format="graphml")
# write_graph, giving it a different name to indicate it has link
# communities. Include this in your HW submission.
write_graph(NS_comm, "Networks/NS-Reified-Communities.graphml", format="graphml")
# include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.png")
?getLinkCommunities
include_graphics("Images/q2_b.png")
include_graphics("Images/q2_c.png")
include_graphics("Images/q2_c.png")
include_graphics("Images/q2_c.png")
?similarities
?linkcomm
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
source("Utility/reify_link_communities.R")
include_graphics("Images/q3_a.png")
include_graphics("Images/q3_a.png")
include_graphics("Images/q3_a2.png")
# Include filtered subgraph showing Newman, his link community, and the
# nodes in question that are not in his link community. Easy way:
# Newman's ego network of order 2.
include_graphics("Images/q3_b.png")
# COMMENT: You are allowed to change  the structure of the paragraphs
# below if you find another way to organize the discussion to be more
# natural.
# Include filtered subgraph showing Newman, his link community, and the
# nodes in question that are not in his link community. Easy way:
# Newman's ego network of order 2.
include_graphics("Images/q3_b.png")
The picture on top is pretty bad but I filtered by NODEID: NEWMAN,M and set the depth to 1. Then scrolled over COMM_305 which filtered out 4 authors that apart of the community.
# Include filtered subgraph showing Newman, his link community, and the
# nodes in question that are not in his link community. Easy way:
# Newman's ego network of order 2.
include_graphics("Images/q3_b.png")
include_graphics("Images/q3_b2.png")
include_graphics("Images/q3_b3.png")
# COMMENT: You are allowed to change  the structure of the paragraphs
# below if you find another way to organize the discussion to be more
# natural.
# Include filtered subgraph showing Newman, his link community, and the
# nodes in question that are not in his link community. Easy way:
# Newman's ego network of order 2.
#include_graphics("Images/q3_b.png")
include_graphics("Images/q3_b2.png")
include_graphics("Images/q3_b3.png")
# COMMENT: You are allowed to change  the structure of the paragraphs
# below if you find another way to organize the discussion to be more
# natural.
include_graphics("Images/q3_b4.png")
include_graphics("Images/q3_b4.png")
include_graphics("Images/q3_b4.png")
include_graphics("Images/q3_b5.png")
include_graphics("Images/q3_b6.png")
include_graphics("Images/q3_b7.png")
include_graphics("Images/q2_c.png")
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
library(linkcomm)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
source("Utility/reify_link_communities.R")
include_graphics("Images/q3_b8.png") #who's connected to newman depth = 2
include_graphics("Images/q4_a.png")
include_graphics("Images/q4_b.png")
include_graphics("Images/q4_b2.png")
include_graphics("Images/q4_b3.png")
NS <- read_graph("Networks/netscience.graphml",
format="graphml")
summary(NS)
# Compute unweighted degree, weighted degree, unweighted page rank,
# and unweighted betweenness centrality for the vertices in this
# graph, and assign them to vertices as attributes
V(NS)$degree <- degree(NS)
V(NS)$wdegree <- strength(NS, mode="all")
V(NS)$pagerank <- page_rank(NS)$vector
V(NS)$betweenness <- betweenness(NS, normalized=TRUE, weights=1/E(NS)$weight)
summary(NS)
# Compute unweighted cluster_louvain and unweighted cluster_infomap
# community membership, and assign these as attributes to the
# vertices.
V(NS)$louvain  <- membership(cluster_louvain(NS))
V(NS)$infomap  <- membership(cluster_infomap(NS))
summary(NS)
# Construct an unweighted edge list.
# Compute link communities with hcmethod "average", and verbose=FALSE
#   and plot=FALSE. DO NOT USE {r echo=FALSE}: it hides the code
# Print the link community object
NS_edges <- as_edgelist(NS)
head(NS_edges)
NS_lc <- getLinkCommunities(NS_edges, hcmethod="average", verbose=FALSE, plot=FALSE)
print(NS_lc)
# Use reify_link_communities to create a copy of the graph with link
# communities reified as nodes. Summarize the new graph.
# summary(...)
NS_comm <- reify_link_communities(NS, NS_lc)
# write_graph, giving it a different name to indicate it has link
# communities. Include this in your HW submission.
write_graph(NS_comm, "Networks/NS-Reified-Communities.graphml", format="graphml")
include_graphics("Images/q1_c.png")
include_graphics("Images/q1_c.pdf")
include_graphics("Images/q1_c.pdf")
include_graphics("Images/q1_c.png")
include_graphics("Images/q2_b.png")
include_graphics("Images/q2_c.png")
include_graphics("Images/q3_a.png") #depth 1
include_graphics("Images/q3_a2.png") #depth 2
# Include filtered subgraph showing Newman, his link community, and the
# nodes in question that are not in his link community. Easy way:
# Newman's ego network of order 2.
#include_graphics("Images/q3_b.png")
include_graphics("Images/q3_b2.png") #who's connected to newman?
include_graphics("Images/q3_b3.png") #who's in the community_305?
# COMMENT: You are allowed to change  the structure of the paragraphs
# below if you find another way to organize the discussion to be more
# natural.
include_graphics("Images/q3_b4.png") #who's connected to Stauffer?
include_graphics("Images/q3_b5.png") #who's connected to Sole?
include_graphics("Images/q5_a.png") # for Louvain
include_graphics("Images/q5_a2.png") # for color code
include_graphics("Images/q5_b.png") # for InfoMap
include_graphics("Images/q5_b2.png") # for color code
