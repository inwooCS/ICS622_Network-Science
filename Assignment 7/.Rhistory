format="graphml")
summary(Heroes)
Heroes.louvain     <- cluster_louvain(Heroes, weights= E(Heroes)$weight)
Heroes.infomap     <- cluster_infomap(Heroes, e.weights = E(Heroes)$weight)
V(Heroes)$louvain  <- membership(Heroes.louvain)
V(Heroes)$infomap  <- membership(Heroes.infomap)
V(Heroes)$degree   <- degree(Heroes)
V(Heroes)$wdegree  <- strength(Heroes, weights=E(Heroes)$weight)
V(Heroes)$pagerank <- page_rank(Heroes)
summary(Heroes)
write_graph(Heroes,"Hero-Communities.graphml", format="graphml")
summary(E(Heroes)$louvain
)
summary(E(Heroes)$louvain)
V(Heroes)$louvain
Heroes.louvain
Heroes.louvain     <- cluster_louvain(Heroes, weights= E(Heroes)$weight)
Heroes.infomap     <- cluster_infomap(Heroes, e.weights = E(Heroes)$weight)
V(Heroes)$louvain  <- membership(Heroes.louvain)
V(Heroes)$infomap  <- membership(Heroes.infomap)
V(Heroes)$degree   <- degree(Heroes)
V(Heroes)$wdegree  <- strength(Heroes, weights=E(Heroes)$weight)
V(Heroes)$pagerank <- page_rank(Heroes)
summary(Heroes)
write_graph(Heroes,"Hero-Communities.graphml", format="graphml")
?crossing
V(Heroes)$pagerank <- page_rank(Heroes, weights = E(Heroes)$weight )
V(Heroes)$pagerank <- page_rank(V(Heroes))
V(Heroes)$pagerank <- page_rank(V(Heroes)$weight)
V(Heroes)$pagerank <- page_rank(Heroes)$vector
V(Heroes)$pagerank <- page_rank(Heroes)$vector
Heroes <- read_graph("Networks/Hero-Coappearance-Network.graphml",
format="graphml")
summary(Heroes)
Heroes.louvain     <- cluster_louvain(Heroes, weights= E(Heroes)$weight)
Heroes.infomap     <- cluster_infomap(Heroes, e.weights = E(Heroes)$weight)
V(Heroes)$louvain  <- membership(Heroes.louvain)
V(Heroes)$infomap  <- membership(Heroes.infomap)
V(Heroes)$degree   <- degree(Heroes)
V(Heroes)$wdegree  <- strength(Heroes, weights=E(Heroes)$weight)
V(Heroes)$pagerank <- page_rank(Heroes)$vector
summary(Heroes)
write_graph(Heroes,"Hero-Communities.graphml", format="graphml")
?crossing
crossing(V(Heroes)$louvain , Heroes)
crossing(Heroes.louvain , Heroes)
crossing(Heroes.louvain , Heroes)[1:20]
crossing(membership(Heroes.louvain), Heroes)[1:20]
sort(table(V(Heros)[ends(Heros, which(crossing(Heroes.louvain, Heros)))]$id))
sort(table(V(Heros)[ends(Heroes, which(crossing(Heroes.louvain, Heros)))]$id))
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heros)))]$id))
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroess)))]$id))
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))[1:20]
# Display in combined tibble:
tibble(Hero_in_Louvain = Heroes.louvain,
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))[1:20],
Hero_in_Infomap = Heroes.infomap,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id))[1:20]
)
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain,
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))[1:20],
Hero_in_Infomap = V(Heroes)$infomap,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id))[1:20]
)
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))[1:20],
Hero_in_Infomap = V(Heroes)$infomap,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id))[1:20]
)
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id))[1:20],
Hero_in_Infomap = V(Heroes)$infomap[1:20],
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id))[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id), decreasing=TRUE)[1:20],
Hero_in_Infomap = V(Heroes)$infomap[1:20],
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain#,[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id), decreasing=TRUE),#[1:20],
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain,#,[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id), decreasing=TRUE),#[1:20],
Hero_in_Infomap = V(Heroes)$infomap,#,[1:20],
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE),#[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id), decreasing=TRUE)[1:20],
Hero_in_Infomap = V(Heroes)$infomap[1:20],
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)#[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id), decreasing=TRUE)[1:20],
Hero_in_Infomap = V(Heroes)$infomap[1:20],
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
view(sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20])
which(crossing(Heroes.louvain, Heroes)))]$label
which(crossing(Heroes.louvain, Heroes))]$label
which(crossing(Heroes.louvain, Heroes))$label
[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]
[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$label
ends(Heroes, which(crossing(Heroes.louvain, Heroes)))
ends(Heroes, which(crossing(Heroes.louvain, Heroes)))[1:20]
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = c("n60  n48   n5  n78  n73 n188 n101  n65 n113  n46  n83  n79  n57 n463 n329  n55  n12  n66  n39  n51 "),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = c("n60","n48","n5","  n78","  n73"," n188"," n101","  n65"," n113","  n46","  n83","  n79","  n57"," n463"," n329","  n55","  n12","  n66","  n39","  n51 "),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = table(c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51")),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = table(clist("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51")),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = table(list("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51")),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = list("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)$louvain[1:20],
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20]
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
)
tibble(Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
rbind(
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
),
tibble(Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
rbind(
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
),
tibble(Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
)
tibble(Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = c("n60","n78","n48","n73","n188","n101","n79","n5","n39","n46","n113","n57","n65","n66","n83","n12","n329","n55","n247","n58"),
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
)
tibble(Hero_in_Infomap = c("n60","n48","n5" ,"n78","n73","n188","n101","n65","n113","n46","n83","n79","n57","n463","n329","n55","n12","n66","n39","n51"),
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Reminder: unlike Analysis 6, grade now includes "T"
rbind(
tibble(metric = "Modularity",
Classname = modularity(PSF, as.integer(as.factor(V(PSF)$classname))),
Grade     = modularity(PSF, as.integer(as.factor(V(PSF)$grade))),
Louvain   = modularity(PSF.louvain),
InfoMap   = modularity(PSF.infomap),
),
tibble(metric = "Assortativity",
Classname = assortativity_nominal(PSF, as.integer(as.factor(V(PSF)$classname))),
Grade     = assortativity_nominal(PSF, as.integer(as.factor(V(PSF)$grade))),
Louvain   = assortativity(PSF, membership(PSF.louvain)),
InfoMap   = assortativity(PSF, membership(PSF.infomap))
)
)
assortativity(PSF, membership(PSF.infomap))
assortativity(PSF, PSF.infomap)
PSF.infomap
membership(PSF.infomap)
?compare
view(sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20])
include_graphics("Images/grade.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/grade_key.png")
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
)
tibble(Hero_in_Infomap = Hero_in_Infomap = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
tibble(Hero_in_Infomap = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
gc()
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# For including images of these types
library(jpeg)
library(png)
# Utilities may be added here.
PS_v1 <- read_graph("Networks/sp_data_school_day_1_2_multigraph.graphml",
format="graphml")
summary(PS_v1)
print(paste("Before simplify: max count =", max(E(PS_v1)$count),
"max duration =", max(E(PS_v1)$duration)),
quote=FALSE)
PS_v2 <- simplify(PS_v1, edge.attr.comb = list(weight="sum", duration="sum", count="sum", "ignore"))
print(paste("After simplify: max count =", max(E(PS_v2)$count),
"max duration =", max(E(PS_v2)$duration)),
quote=FALSE)
summary(PS_v2)
table(E(PS_v2)$count, E(PS_v2)$duration)[1:12,1:12]
PSF <- delete_edges(PS_v2, E(PS_v2)[duration < (count*20) + 40])
PSF$name <- "Filtered Primary School Contacts"
# Expecting 242 vertices 2759 edges
summary(PSF)
table(count=E(PSF)$count, duration=E(PSF)$duration)[1:10,1:12]
PSF <- delete_edges(PS_v2, E(PS_v2)[duration < (count*20) + 40])
PSF$name <- "Filtered Primary School Contacts"
# Expecting 242 vertices 2759 edges
summary(PSF)
table(count=E(PSF)$count, duration=E(PSF)$duration)[1:10,1:12]
V(PSF)$grade <- substr(V(PSF)$classname, 1, 1)
table(V(PSF)$grade)
V(PSF)$gender <- replace(V(PSF)$gender, V(PSF)$gender=="Unknown", "U")
sort(unique(V(PSF)$gender))
V(PSF)$classname <- replace(V(PSF)$classname,
V(PSF)$classname=="Teachers", "T")
sort(unique(V(PSF)$classname))
PSF.infomap <- cluster_infomap(PSF, e.weights= E(PSF)$duration)
sizes(PSF.infomap)
PSF.louvain <- cluster_louvain(PSF, weights = E(PSF)$duration)
sizes(PSF.louvain)
# Reminder: unlike Analysis 6, grade now includes "T"
rbind(
tibble(metric = "Modularity",
Classname = modularity(PSF, as.integer(as.factor(V(PSF)$classname))),
Grade     = modularity(PSF, as.integer(as.factor(V(PSF)$grade))),
Louvain   = modularity(PSF.louvain),
InfoMap   = modularity(PSF.infomap),
),
tibble(metric = "Assortativity",
Classname = assortativity_nominal(PSF, as.integer(as.factor(V(PSF)$classname))),
Grade     = assortativity_nominal(PSF, as.integer(as.factor(V(PSF)$grade))),
Louvain   = assortativity(PSF, membership(PSF.louvain)),
InfoMap   = assortativity(PSF, membership(PSF.infomap))
)
)
# Using any approach you prefer, make a correlation matrix of this form:
# partition  Classname  Grade      InfoMap    Louvain
# Classname  x.xxxxx    x.xxxxx    x.xxxxx    x.xxxxx
# Grade      x.xxxxx    x.xxxxx    x.xxxxx    x.xxxxx
# InfoMap    x.xxxxx    x.xxxxx    x.xxxxx    x.xxxxx
# Louvain    x.xxxxx    x.xxxxx    x.xxxxx    x.xxxxx
# I ended up using a conventional programming for-loop approach. There
# is probably an elegant R-style approach, but the tibble-based
# solution I constructed required repeating code that constructs
# membership lists, which did not seem any more elegant than a loop.
rbind(
tibble(parition = "Classname",
Classname = compare(V(PSF)$classname, V(PSF)$classname, method = "nmi"),
Grade     = compare(V(PSF)$classname, V(PSF)$grade, method="nmi"),
Louvain   = compare(V(PSF)$classname, membership(PSF.louvain), method="nmi"),
InfoMap   = compare(V(PSF)$classname, membership(PSF.infomap), method="nmi"),
),
tibble(parition = "Grade",
Classname = compare(V(PSF)$grade, V(PSF)$classname, method = "nmi"),
Grade     = compare(V(PSF)$grade, V(PSF)$grade, method="nmi"),
Louvain   = compare(V(PSF)$grade, membership(PSF.louvain), method="nmi"),
InfoMap   = compare(V(PSF)$grade, membership(PSF.infomap), method="nmi"),
),
tibble(parition = "Louvain",
Classname = compare(membership(PSF.louvain), V(PSF)$classname, method = "nmi"),
Grade     = compare(membership(PSF.louvain), V(PSF)$grade, method="nmi"),
Louvain   = compare(membership(PSF.louvain), membership(PSF.louvain), method="nmi"),
InfoMap   = compare(membership(PSF.louvain), membership(PSF.infomap), method="nmi"),
),
tibble(parition = "Infomap",
Classname = compare(membership(PSF.infomap), V(PSF)$classname, method = "nmi"),
Grade     = compare(membership(PSF.infomap), V(PSF)$grade, method="nmi"),
Louvain   = compare(membership(PSF.infomap), membership(PSF.louvain), method="nmi"),
InfoMap   = compare(membership(PSF.infomap), membership(PSF.infomap), method="nmi"),
)
)
V(PSF)$louvain <- membership(PSF.louvain)
V(PSF)$infomap <- membership(PSF.infomap)
sort(unique(E(PSF)$weight))
E(PSF)$days <- E(PSF)$weight
E(PSF)$weight <- E(PSF)$duration
summary(PSF)
write_graph(PSF, "Networks/Primary-School-Students-Filtered.graphml", format="graphml")
include_graphics("Images/classname.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/classname_key.png")
include_graphics("Images/grade.png", dpi=150)
include_graphics("Images/grade.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/classname_key.png")
# Please include a color key from Gephi here
include_graphics("Images/grade_key.png")
include_graphics("Images/infomap.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/infomap_key.png")
include_graphics("Images/grade.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/grade_key.png")
# Please include a color key from Gephi here
include_graphics("Images/grade_key.png")
include_graphics("Images/infomap.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/infomap_key.png")
include_graphics("Images/louvain_key.png")
Heroes <- read_graph("Networks/Hero-Coappearance-Network.graphml",
format="graphml")
summary(Heroes)
Heroes.louvain     <- cluster_louvain(Heroes, weights= E(Heroes)$weight)
Heroes.infomap     <- cluster_infomap(Heroes, e.weights = E(Heroes)$weight)
V(Heroes)$louvain  <- membership(Heroes.louvain)
V(Heroes)$infomap  <- membership(Heroes.infomap)
V(Heroes)$degree   <- degree(Heroes)
V(Heroes)$wdegree  <- strength(Heroes, weights=E(Heroes)$weight)
V(Heroes)$pagerank <- page_rank(Heroes)$vector
summary(Heroes)
write_graph(Heroes,"Hero-Communities.graphml", format="graphml")
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
# Compute crossings for Infomap, sorted decreasing by crossing:
# Display in combined tibble:
tibble(Hero_in_Louvain = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_L   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$id),decreasing=TRUE)[1:20],
Hero_in_Infomap = V(Heroes)[sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id),decreasing=TRUE)[1:20]]$label,
Cross_Count_I   = sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$id), decreasing=TRUE)[1:20]
)
write_graph(Heroes, format = "graphml")
write_graph(Heroes, file="Networks/Hero-Coappearance-Network.graphml",format = "graphml")
include_graphics("Images/comic.png")
include_graphics("Images/comic.png")
include_graphics("Images/comic.png")
include_graphics("Images/comic.png")
include_graphics("Images/comic.png")
include_graphics("Images/marvelvillan.png.png")
include_graphics("Images/marvelvillan.png")
# include_graphics("Images/avengers.png")
include_graphics("Images/avengers.png")
include_graphics("Images/marvelvillan.png")
include_graphics("Images/avengers.png")
include_graphics("Images/fantastic4.png")
include_graphics("Images/fantastic4.png")
