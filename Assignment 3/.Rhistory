require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
IR.modelTitle <- c("Internet Routers Original", "G(n,m)", "Config", "Rewire")
IR.models <- list(IR, IR.gnm, IR.config, IR.rewire)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
IR.k   <- mean(degree(IR))
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml",
format="graphml")
WA$name <- "EuroSiS WebAtlas"
summary(WA)
IR <- read_graph("Networks/internet_routers-22july06.graphml",
format="graphml")
IR <- read_graph("Networks/internet_routers-22july06.graphml",
format="graphml")
IR$name <- "Internet Routers July 2006"
IR$name <- "Internet Routers July 2006"
summary(IR)
WA.k   <- mean(degree(WA))
WA.lnv <- log(gorder(WA))
IR.k   <- mean(degree(IR))
IR.lnv <- log(gorder(IR))
WA.k   <- mean(degree(WA))
WA.lnv <- log(gorder(WA))
IR.k   <- mean(degree(IR))
IR.lnv <- log(gorder(IR))
WA.k   <- mean(degree(WA))
WA.lnv <- log(gorder(WA))
IR.k   <- mean(degree(IR))
IR.lnv <- log(gorder(IR))
include_graphics("Images/Fig-3-7-Random_Graph_Regimes.png")
table(sapply(decompose(WA), vcount))
table(sapply(decompose(IR), vcount))
WA.gnm <- sample_gnm(vcount(WA), ecount(WA))
WA.gnm$name <- paste("WA", WA.gnm$name)
summary(WA.gnm)
WA.config <- sample_degseq(degree(WA), method="simple")
WA.config$name <- paste("WA", WA.config$name)
summary(WA.config)
WA.rewire <- rewire(WA, with=keeping_degseq(niter=ecount(WA)*1000))
WA.rewire$name <- "EuroSiS WebAtlas Rewired"
summary(WA.rewire)
IR.gnm <- sample_gnm(vcount(IR), ecount(IR))
IR.gnm$name <- paste("IR", IR.gnm$name)
summary(IR.gnm)
IR.config <- sample_degseq(degree(IR), method="simple")
IR.config$name <- paste("IR", IR.config$name)
summary(IR.config)
IR.rewire <- rewire(IR, with=keeping_degseq(niter=ecount(IR)*1000))
IR.rewire$name <- "Internet Routers Rewired"
summary(IR.rewire)
WA.modelTitle <- c("EuroSIS WebAtlas Original", "G(n,m)", "Config", "Rewire")
WA.models <- list(WA, WA.gnm, WA.config, WA.rewire)
WA.metrics <- tibble(
Model               = WA.modelTitle,
V                   = sapply(WA.models, vcount),
E                   = sapply(WA.models, ecount),
MeanDist            = sapply(WA.models, mean_distance),
Components          = sapply(WA.models, count_components),
Transitivity        = sapply(WA.models, transitivity, type="global"),
DegreeAssortativity = sapply(WA.models, assortativity_degree)
)
WA.metrics
IR.modelTitle <- c("Internet Routers Original", "G(n,m)", "Config", "Rewire")
IR.models <- list(IR, IR.gnm, IR.config, IR.rewire)
IR.metrics <- tibble(
Model               = IR.modelTitle,
V                   = sapply(IR.models, vcount),
E                   = sapply(IR.models, ecount),
MeanDist            = sapply(IR.models, mean_distance),
Components          = sapply(IR.models, count_components),
Transitivity        = sapply(IR.models, transitivity, type="global"),
DegreeAssortativity = sapply(IR.models, assortativity_degree)
)
IR.metrics
plot(nonzero_degree_distribution(WA.gnm), main="EuroSiS WebAtlas G(n,m)", xlab="k", ylab="p(k)")
plot(degree_domain(WA.gnm), nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas G(n,m)",
xlab="k",
ylab="p(k)"
)
IR.config <- sample_degseq(degree(IR), method="vl")
IR.config$name <- paste("IR", IR.config$name)
summary(IR.config)
IR.modelTitle <- c("Internet Routers Original", "G(n,m)", "Config", "Rewire")
IR.models <- list(IR, IR.gnm, IR.config, IR.rewire)
IR.metrics <- tibble(
Model               = IR.modelTitle,
V                   = sapply(IR.models, vcount),
E                   = sapply(IR.models, ecount),
MeanDist            = sapply(IR.models, mean_distance),
Components          = sapply(IR.models, count_components),
Transitivity        = sapply(IR.models, transitivity, type="global"),
DegreeAssortativity = sapply(IR.models, assortativity_degree)
)
IR.metrics
plot(degree_domain(WA.gnm), nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas G(n,m)",
xlab="k",
ylab="p(k)"
)
plot(
degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas G(n,m)",
xlab="k",
ylab="p(k)"
)
plot(
degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas with G(n,m)",
xlab="k",
ylab="p(k)"
)
plot(
degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas with G(n,m) No Zeros",
xlab="k",
ylab="p(k)"
)
plot(
degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="EuroSiS WebAtlas with G(n,m), No Zeros",
xlab="k",
ylab="p(k)"
)
plot(
degree_domain(IR.gnm),
nonzero_degree_distribution(IR.gnm),
main="Internet Routers with G(n,m), No Zeros ",
xlab="k",
ylab="p(k)",
log="xy"
)
write_graph(WA.gnm,    "WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, "WA_rewire.graphml", format = "graphml")
summary(WA.gnm)
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm,    "WA_gnm.graphml",    format = "ncol")
write_graph(WA.config, "WA_config.graphml", format = "ncol")
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
# Code to write out WA.gnm, WA.config and WA.rewire
gephi_write_edges(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
# Code to write out WA.gnm, WA.config and WA.rewire
gephi_write_edges(V(WA.gnm)$id,    file = "WA_gnm.graphml",    format = "graphml")
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(V(WA.gnm)$id,    file = "WA_gnm.graphml",    format = "graphml")
# Code to write out WA.gnm, WA.config and WA.rewire
test <-V(WA.gnm)$id
write_graph(test,    file = "WA_gnm.graphml",    format = "graphml")
write_graph(test,    file = "WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
summary(WA.gnm)
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "edgelist")
write_graph(WA.gnm,    file = "WA_gnm.txt",    format = "edgelist")
graphml
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
summary(WA)
summary(WA.gnm)
View(WA.config)
View(WA.gnm)
View(WA.gnm)
View(WA.gnm)
write_graph(WA.gnm,    file = "WA_gnm",    format = "pajek")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "pajek")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "pajek")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "pajek")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "WA_gnm.pajek",    format = "pajek")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "WA_gnm.pajek",    format = "pajek")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
write_graph?
df
?write_graph
write_graph(WA.gnm,    file = "WA_gnm",    format = "pajek")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
save(Wa.gnm, file = "WA.gnm.graphml")
save(WA.gnm, file = "WA.gnm.graphml")
save(WA.gnm, file = "WA.gnm.graphml")
save(WA.gnm, file = "WA.gnm.graphml")
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
write_graph(WA.gnm,    file = "WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.config, file = "WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "\Networks\WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "\*Networks\WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "*\Networks\WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "\Networks\WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "Networks\WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
include_graphics("Images/original.png")
include_graphics("Images/gnm.png")
include_graphics("Images/config.png")
include_graphics("Images/rewire.png")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
write_graph(WA.gnm,    file = "Networks/WA_gnm.graphml",    format = "graphml")
write_graph(WA.config, file = "Networks/WA_config.graphml", format = "graphml")
write_graph(WA.rewire, file = "Networks/WA_rewire.graphml", format = "graphml")
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA.k   <- mean(degree(WA))
WA.lnv <- log(gorder(WA))
IR.k   <- mean(degree(IR))
IR.lnv <- log(gorder(IR))
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
library(tibble)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
